---
const { class: buttonClass, classSvg: svgClass } = Astro.props;
---

<button
  class:list={["theme-toggle w-12 h-12 cursor-pointer rounded-full flex items-center justify-center text-[var(--md-sys-color-on-surface-variant)] hover:bg-[var(--md-sys-color-secondary-container)] hover:text-[var(--md-sys-color-on-secondary-container)] transition-all duration-300 relative group",
    buttonClass,
  ]}
  aria-label="Toggle theme"
  type="button"
>
  <!-- Sun Icon (visible in dark mode) -->
  <svg
    class:list={["theme-dark-icon absolute w-6 h-6 transition-all duration-300 opacity-0 rotate-90 scale-75",
    svgClass,
  ]}
    fill="currentColor"
    viewBox="0 0 20 20"
  >
    <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"></path>
  </svg>

  <!-- Moon Icon (visible in light mode) -->
  <svg
    class="theme-light-icon absolute w-6 h-6 transition-all duration-300 opacity-0 -rotate-90 scale-75"
    fill="currentColor"
    viewBox="0 0 20 20"
  >
    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
  </svg>

  <!-- Tooltip -->
  <div class="tooltip absolute left-full ml-2 px-3 py-2 bg-[var(--md-sys-color-inverse-surface)] text-[var(--md-sys-color-inverse-on-surface)] rounded-xl text-sm font-medium whitespace-nowrap opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 pointer-events-none z-50">
    <span class="theme-tooltip-text">Toggle theme</span>
  </div>
</button>

<style>
  .tooltip::before {
    content: '';
    position: absolute;
    right: 100%;
    top: 50%;
    transform: translateY(-50%);
    border: 6px solid transparent;
    border-right-color: var(--md-sys-color-inverse-surface);
  }

  .theme-toggle:active {
    transform: scale(0.95);
  }

  /* Icon show state */
  .theme-dark-icon.show {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  .theme-light-icon.show {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }
</style>

<script>
  function setupThemeToggle(btn: HTMLButtonElement) {
    const darkIcon = btn.querySelector('.theme-dark-icon');
    const lightIcon = btn.querySelector('.theme-light-icon');
    const tooltipText = btn.querySelector('.theme-tooltip-text');

    function updateIcons() {
      const isDark = document.documentElement.classList.contains('dark');
      if (isDark) {
        darkIcon?.classList.add('show');
        lightIcon?.classList.remove('show');
        tooltipText && (tooltipText.textContent = 'Switch to light mode');
      } else {
        lightIcon?.classList.add('show');
        darkIcon?.classList.remove('show');
        tooltipText && (tooltipText.textContent = 'Switch to dark mode');
      }
    }

    function toggleTheme() {
      const html = document.documentElement;
      const isDark = html.classList.contains('dark');
      const newTheme = isDark ? 'light' : 'dark';
      html.classList.remove('light', 'dark');
      html.classList.add(newTheme);
      localStorage.setItem('theme', newTheme);
      updateIcons();
    }

    btn.addEventListener('click', toggleTheme);

    // Observe perubahan class di <html>
    const observer = new MutationObserver(updateIcons);
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });

    updateIcons(); // initial
  }

  function initAllThemeToggles() {
    document.querySelectorAll('.theme-toggle').forEach((el) => {
    setupThemeToggle(el as HTMLButtonElement);
});

  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAllThemeToggles);
  } else {
    initAllThemeToggles();
  }
</script>
